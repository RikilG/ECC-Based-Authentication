from CryptoAPI import *
from time import time


class Hospital:

    def __init__(self):
        self.id_h   = 1
        self.NID    = 0
        self.Ni     = 0
        self.id_d   = 0
        self.id_p   = 0
        self.a      = gen_randint() # a belongs to Zq*
        self.g      = gen_randint()
        self.c_data = (0,0,0,0) # E1, T_C2, S1, b
        self.m_h    = [0,"patient's report generated by healthcare"] # id_p, Data_p
        self.data_p = "patient's report generated by healthcare"
        self.PR_h, self.PU_h = gen_sig_keys()
        self.T_H1 = time()
        self.T_H2 = 0
        self.T_H3 = 0
        self.delta_T = 5000
        self.abg     = 0


    def ping_to_cloud(self,cloud):
        print(":: phase 1, step 1 ::")
        print("Send <ID_h, a, T_H1> to Cloud via SECURE channel")
        # print(f"Send <ID_h, R> = <{self.id_h}, {self.R}> to Cloud via SECURE channel")
        self.m_h = [self.id_p,self.data_p]
        self.a = gen_randint()
        self.T_H1 = time()
        a,T_H1 = self.a,self.T_H1
        cloud.h_data = (self.id_h,a,T_H1)
    

    def send_message(self, cloud):
        print(":: phase 1, step 3 ::")
        E1,T_C2 = self.c_data
        self.T_H2 = time()
        T_H2 = self.T_H2
        if not (T_H2 - T_C2) < self.delta_T:
            print("Time Limit Exceeded between hospital and cloud upload :: step3")
            print("Terminating Session")
            exit(1)

        a, m_h,T_H1 = self.a, self.m_h, self.T_H1
        id_h, id_p = self.id_h, m_h[0] 
        
        K1 = gen_hash(id_h,a,T_H1)
        b,S1,T_C2 = decrypt(K1,E1)
        S11 = gen_hash(id_h,a,b,T_H1)

       
        PR_h = self.PR_h

        if S1 != S11:
            print(f"Unable to verify cloud. hospital S1 = {S1}, S11 = {S11}")
            exit(1)

        print("Cloud verified")
        print("Hospital Authenticates Cloud")
        Ni = self.Ni
        NID= self.NID
        g = self.g
        abg = a*b*g
        self.abg = abg
        T_C1 = cloud.T_C1
        SK_hc   = gen_hash(id_h, S11,abg,T_C1) # T_C1 is still not getted here
        key2    = gen_hash(id_p,id_h, NID)
        C_h     = encrypt(key2, m_h)
        MD_h    = gen_hash(m_h)
        Sig_h   = gen_sig(PR_h, MD_h)
        T_H3 = time()
        self.T_H3 = T_H3
        S2      = gen_hash(SK_hc, C_h,Sig_h,T_H3)
        E2      = encrypt(SK_hc, [id_p,NID,C_h,S2,Sig_h,T_H3])

        print("Send message to cloud via PUBLIC channel")
        cloud.message = (E2,T_H3,g)